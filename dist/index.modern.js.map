{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Get the ratio of a distance on the map to the corresponding distance on the ground.\n *\n * @param {Object} [options]\n * @param {number} [options.map] MapLibre map instance\n * @param {number} [options.maxWidth='100'] The maximum length of the scale control in pixels.\n *   A horizontal scale is imagined to be present at center of the map\n *   container with maximum length (Default) as 100px.\n *   Using spherical law of cosines approximation, the real distance is\n *   found between the two coordinates.\n * @param {string} [options.type='metric'] Unit of the distance (`'imperial'`, `'metric'` or `'nautical'`).\n */\nexport function getScale({ map, type = \"metric\", maxWidth = 100 }) {\n  const y = map.getContainer().clientHeight / 2;\n  const left = map.unproject([0, y]);\n  const right = map.unproject([maxWidth, y]);\n  const maxMeters = left.distanceTo(right);\n\n  // The real distance corresponding to 100px scale length is rounded off to\n  // near pretty number and the scale length for the same is found out.\n  if (type === \"imperial\") {\n    const maxFeet = 3.2808 * maxMeters;\n    if (maxFeet > 5280) {\n      const maxMiles = maxFeet / 5280;\n      return calculateScale(maxMiles, \"miles\");\n    } else {\n      return calculateScale(maxFeet, \"feet\");\n    }\n  } else if (type === \"nautical\") {\n    const maxNauticals = maxMeters / 1852;\n    return calculateScale(maxNauticals, \"nautical-miles\");\n  } else if (maxMeters >= 1000) {\n    return calculateScale(maxMeters / 1000, \"kilometers\");\n  } else {\n    return calculateScale(maxMeters, \"meters\");\n  }\n}\n\nfunction calculateScale(maxDistance, unit) {\n  const distance = getRoundNum(maxDistance);\n  const ratio = distance / maxDistance;\n\n  return { distance, ratio, unit };\n}\n\nfunction getDecimalRoundNum(d) {\n  const multiplier = Math.pow(10, Math.ceil(-Math.log(d) / Math.LN10));\n  return Math.round(d * multiplier) / multiplier;\n}\n\nfunction getRoundNum(num) {\n  const pow10 = Math.pow(10, `${Math.floor(num)}`.length - 1);\n  let d = num / pow10;\n\n  d =\n    d >= 10\n      ? 10\n      : d >= 5\n      ? 5\n      : d >= 3\n      ? 3\n      : d >= 2\n      ? 2\n      : d >= 1\n      ? 1\n      : getDecimalRoundNum(d);\n\n  return pow10 * d;\n}\n"],"names":["getScale","map","type","maxWidth","y","getContainer","clientHeight","left","unproject","right","maxMeters","distanceTo","maxFeet","calculateScale","maxDistance","unit","distance","num","pow10","Math","pow","floor","length","d","multiplier","ceil","log","LN10","round","getDecimalRoundNum","getRoundNum","ratio"],"mappings":"SAYgBA,GAASC,IAAEA,EAAFC,KAAOA,EAAO,SAAdC,SAAwBA,EAAW,MAC1D,MAAMC,EAAIH,EAAII,eAAeC,aAAe,EACtCC,EAAON,EAAIO,UAAU,CAAC,EAAGJ,IACzBK,EAAQR,EAAIO,UAAU,CAACL,EAAUC,IACjCM,EAAYH,EAAKI,WAAWF,GAIlC,GAAa,aAATP,EAAqB,CACvB,MAAMU,EAAU,OAASF,EACzB,OAAIE,EAAU,KAELC,EADUD,EAAU,KACK,SAEzBC,EAAeD,EAAS,QAExBV,MAAS,aAATA,EAEFW,EADcH,EAAY,KACG,kBAC3BA,GAAa,IACfG,EAAeH,EAAY,IAAM,cAEjCG,EAAeH,EAAW,UAIrC,SAASG,EAAeC,EAAaC,GACnC,MAAMC,EAWR,SAAqBC,GACnB,MAAMC,EAAQC,KAAKC,IAAI,GAAK,GAAED,KAAKE,MAAMJ,KAAOK,OAAS,GACzD,IAAIC,EAAIN,EAAMC,EAed,OAbAK,EACEA,GAAK,GACD,GACAA,GAAK,EACL,EACAA,GAAK,EACL,EACAA,GAAK,EACL,EACAA,GAAK,EACL,EAnBR,SAA4BA,GAC1B,MAAMC,EAAaL,KAAKC,IAAI,GAAID,KAAKM,MAAMN,KAAKO,IAAIH,GAAKJ,KAAKQ,OAC9D,OAAOR,KAAKS,MAAML,EAAIC,GAAcA,EAkB9BK,CAAmBN,GAElBL,EAAQK,EA5BEO,CAAYhB,GAG7B,MAAO,CAAEE,SAAAA,EAAUe,MAFLf,EAAWF,EAECC,KAAAA"}